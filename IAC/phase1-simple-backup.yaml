AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Seawater Climate Risk Platform - Phase 1 Simple Infrastructure (Tim-Combo Pattern)'

Parameters:
  AppName:
    Description: Name of the application
    Type: String
    Default: Seawater
  
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  # HoneyDo Cognito Integration (Reuse existing User Pool)
  HoneyDoCognitoUserPoolId:
    Type: String
    Default: us-east-2_dnQfP90vt
    Description: Existing HoneyDo Cognito User Pool ID
  
  HoneyDoCognitoClientId:
    Type: String
    Default: 4o4g5q8cg35na7bvbsnilbk98u
    Description: Existing HoneyDo Cognito Client ID
  
  CognitoRegion:
    Type: String
    Default: us-east-2
    Description: AWS Region for Cognito User Pool
  
  # Database Configuration (external RDS instance)
  DatabaseHost:
    Type: String
    Default: dev-honeydo-pilot-db.cwkfm0ctmqb3.us-east-2.rds.amazonaws.com
    Description: HoneyDo PostgreSQL database host (shared instance)
  
  DatabaseName:
    Type: String
    Default: seawater
    Description: Database name
  
  DatabaseUser:
    Type: String
    Default: seawater_app
    Description: Seawater application database user
  
  DatabasePassword:
    Type: String
    NoEcho: true
    Default: SeawaterSecure123!
    Description: Seawater database password
  
  DatabasePort:
    Type: String
    Default: 5432
    Description: Database port
  
  # External API Keys
  MapBoxAccessToken:
    Type: String
    NoEcho: true
    Default: pk.your_mapbox_token_here
    Description: MapBox access token for geocoding
  
  FEMAAPIKey:
    Type: String
    NoEcho: true
    Default: optional_fema_key
    Description: FEMA API key (optional)

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        DB_HOST: !Ref DatabaseHost
        DB_NAME: !Ref DatabaseName
        DB_USER: !Ref DatabaseUser
        DB_PASSWORD: !Ref DatabasePassword
        DB_PORT: !Ref DatabasePort
        MAPBOX_ACCESS_TOKEN: !Ref MapBoxAccessToken
        FEMA_API_KEY: !Ref FEMAAPIKey
        LOG_LEVEL: debug
        COGNITO_USER_POOL_ID: !Ref HoneyDoCognitoUserPoolId
        COGNITO_CLIENT_ID: !Ref HoneyDoCognitoClientId
        COGNITO_REGION: !Ref CognitoRegion

Resources:

  # IAM Role for Lambda Functions (Tim-Combo pattern)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SeawaterDatabaseAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                Resource: '*'

  # API Gateway (Tim-Combo pattern with Cognito integration)
  SeawaterApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AppName}-${Environment}-API"
      StageName: !Ref Environment
      OpenApiVersion: 3.0.1
      Auth:
        DefaultAuthorizer: SeawaterCognitoAuthorizer
        Authorizers:
          SeawaterCognitoAuthorizer:
            UserPoolArn: !Sub "arn:aws:cognito-idp:${CognitoRegion}:${AWS::AccountId}:userpool/${HoneyDoCognitoUserPoolId}"
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Api-Key,X-Subscription-Tier'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      GatewayResponses:
        DEFAULT_4XX:
          ResponseTemplates:
            "application/json": '{"message":"$context.error.messageString","requestId":"$context.requestId"}'
        DEFAULT_5XX:
          ResponseTemplates:
            "application/json": '{"message":"$context.error.messageString","requestId":"$context.requestId"}'
        UNAUTHORIZED:
          StatusCode: 401
          ResponseTemplates:
            "application/json": '{"message":"Unauthorized - Valid Seawater subscription required","requestId":"$context.requestId"}'
        ACCESS_DENIED:
          StatusCode: 403
          ResponseTemplates:
            "application/json": '{"message":"Access denied - Subscription tier insufficient","requestId":"$context.requestId"}'

  # Core Lambda Functions (No VPC configuration - internet access by default)

  # Health Check Function
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Environment}-HealthCheck"
      CodeUri: ../src/backend/dist/healthCheck/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        HealthCheck:
          Type: Api
          Properties:
            RestApiId: !Ref SeawaterApi
            Path: /health
            Method: GET
            Auth:
              Authorizer: NONE

  # Property Risk Assessment Function
  GetPropertyRiskFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Environment}-GetPropertyRisk"
      CodeUri: ../src/backend/dist/getPropertyRisk/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetPropertyRisk:
          Type: Api
          Properties:
            RestApiId: !Ref SeawaterApi
            Path: /properties/{address}/risk
            Method: GET
            Auth:
              Authorizer: SeawaterCognitoAuthorizer

  # Property Comparison Function
  ComparePropertiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Environment}-CompareProperties"
      CodeUri: ../src/backend/dist/compareProperties/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        CompareProperties:
          Type: Api
          Properties:
            RestApiId: !Ref SeawaterApi
            Path: /properties/compare
            Method: POST
            Auth:
              Authorizer: SeawaterCognitoAuthorizer

  # Geographic Risk Search Function
  GetGeographicRiskFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Environment}-GeographicRisk"
      CodeUri: ../src/backend/dist/getGeographicRisk/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GeographicRisk:
          Type: Api
          Properties:
            RestApiId: !Ref SeawaterApi
            Path: /geographic/risk
            Method: GET
            Auth:
              Authorizer: SeawaterCognitoAuthorizer

  # Bulk Property Risk Assessment Function
  BulkPropertyRiskFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Environment}-BulkPropertyRisk"
      CodeUri: ../src/backend/dist/bulkPropertyRisk/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 120
      MemorySize: 1024
      Events:
        BulkPropertyRisk:
          Type: Api
          Properties:
            RestApiId: !Ref SeawaterApi
            Path: /properties/bulk-risk
            Method: POST
            Auth:
              Authorizer: SeawaterCognitoAuthorizer

  # Agent Configuration Functions - Agent Factory Backend System

  # Agent Trigger Create Function
  AgentTriggerCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Environment}-AgentTriggerCreate"
      CodeUri: ../src/backend/dist/agentTriggerCreate/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Events:
        CreateAgentTrigger:
          Type: Api
          Properties:
            RestApiId: !Ref SeawaterApi
            Path: /config/agent-triggers
            Method: POST
            Auth:
              Authorizer: SeawaterCognitoAuthorizer

  # Agent Trigger Read Function
  AgentTriggerReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Environment}-AgentTriggerRead"
      CodeUri: ../src/backend/dist/agentTriggerRead/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Events:
        ReadAgentTriggers:
          Type: Api
          Properties:
            RestApiId: !Ref SeawaterApi
            Path: /config/agent-triggers
            Method: GET
            Auth:
              Authorizer: SeawaterCognitoAuthorizer

  # Agent Trigger Update Function
  AgentTriggerUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Environment}-AgentTriggerUpdate"
      CodeUri: ../src/backend/dist/agentTriggerUpdate/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Events:
        UpdateAgentTrigger:
          Type: Api
          Properties:
            RestApiId: !Ref SeawaterApi
            Path: /config/agent-triggers
            Method: PUT
            Auth:
              Authorizer: SeawaterCognitoAuthorizer

  # Agent Trigger Delete Function
  AgentTriggerDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AppName}-${Environment}-AgentTriggerDelete"
      CodeUri: ../src/backend/dist/agentTriggerDelete/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Events:
        DeleteAgentTrigger:
          Type: Api
          Properties:
            RestApiId: !Ref SeawaterApi
            Path: /config/agent-triggers
            Method: DELETE
            Auth:
              Authorizer: SeawaterCognitoAuthorizer

Outputs:
  SeawaterApiUrl:
    Description: 'API Gateway URL for Seawater application'
    Value: !Sub 'https://${SeawaterApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  SeawaterApiId:
    Description: 'API Gateway ID'
    Value: !Ref SeawaterApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'


  DatabaseConnectionInfo:
    Description: 'Database connection details'
    Value: !Sub '${DatabaseHost}:${DatabasePort}/${DatabaseName}'
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseInfo'

  CognitoUserPoolId:
    Description: 'HoneyDo Cognito User Pool ID (shared)'
    Value: !Ref HoneyDoCognitoUserPoolId
    Export:
      Name: !Sub '${AWS::StackName}-CognitoUserPoolId'

  CognitoClientId:
    Description: 'HoneyDo Cognito Client ID (shared)'
    Value: !Ref HoneyDoCognitoClientId
    Export:
      Name: !Sub '${AWS::StackName}-CognitoClientId'

  CognitoRegion:
    Description: 'Cognito Region'
    Value: !Ref CognitoRegion
    Export:
      Name: !Sub '${AWS::StackName}-CognitoRegion'