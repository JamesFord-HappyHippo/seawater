{
  "agentFactory": {
    "version": "1.0.0",
    "description": "Self-bootstrapping Agent Factory for Tim-Combo",
    "projectRoot": "/Users/jamesford/Source/Tim-Combo",
    "outputDirectory": "src/agents/generated",
    "templatesDirectory": "src/agents/templates"
  },
  
  "timComboStandards": {
    "standardsPath": ".clinerules",
    "requiredFiles": [
      "api_standards.md",
      "backend_handler_standards.md", 
      "frontend_standards.md",
      "development_principles.md"
    ],
    "patterns": {
      "methodSpecificHandlers": true,
      "jsonbFirst": true,
      "businessScopedIds": true,
      "apiResponseFormat": "APIResponse<T>",
      "errorHandling": "handleError",
      "authenticationFlow": "AWS Cognito + RBAC"
    }
  },

  "agentTypes": {
    "lambda-generator": {
      "description": "Generates Lambda handlers following method-specific patterns",
      "capabilities": [
        "generate-lambda-handlers",
        "method-specific-patterns",
        "api-response-formatting",
        "error-handling-patterns"
      ],
      "outputFormats": ["JavaScript"],
      "dependencies": ["wrapHandler", "executeQuery", "createSuccessResponse", "handleError"]
    },
    
    "component-generator": {
      "description": "Generates React TypeScript components with Flowbite integration",
      "capabilities": [
        "generate-react-components",
        "typescript-patterns",
        "flowbite-integration",
        "context-provider-patterns"
      ],
      "outputFormats": ["TypeScript", "TSX"],
      "dependencies": ["React", "Flowbite", "react-icons"]
    },
    
    "api-designer": {
      "description": "Designs API endpoints following Tim-Combo standards",
      "capabilities": [
        "design-api-endpoints",
        "response-format-standards",
        "method-specific-routing",
        "validation-patterns"
      ],
      "outputFormats": ["TypeScript"],
      "patterns": ["APIResponse<T>", "Records array wrapping", "Method-specific parameters"]
    },
    
    "schema-architect": {
      "description": "Designs database schemas with JSONB-first approach",
      "capabilities": [
        "design-database-schema",
        "jsonb-patterns",
        "typescript-type-generation",
        "data-validation-rules"
      ],
      "outputFormats": ["TypeScript", "SQL"],
      "patterns": ["JSONB columns", "Business-scoped IDs", "Exact field naming"]
    },
    
    "test-generator": {
      "description": "Generates comprehensive test suites",
      "capabilities": [
        "generate-playwright-tests",
        "component-testing",
        "api-testing",
        "e2e-workflows"
      ],
      "outputFormats": ["TypeScript"],
      "frameworks": ["Playwright", "React Testing Library", "Jest"]
    },
    
    "SecurityReviewerAgent": {
      "path": "src/agents/specialists/SecurityReviewerAgent.js",
      "description": "Comprehensive security analysis with production cost controls",
      "capabilities": [
        "security-pattern-analysis",
        "vulnerability-scanning",
        "production-readiness-assessment", 
        "cost-controlled-security",
        "compliance-validation",
        "risk-assessment",
        "progressive-security-enhancement",
        "arm64-optimization-recognition"
      ],
      "securityIntegration": {
        "patterns": "tim_combo_security_standards",
        "validation": "automated_security_validation", 
        "thresholds": "production_cost_controls",
        "compliance": "progressive_security_enhancement",
        "architecture": "serverless_arm64_aware"
      },
      "outputFormats": ["JSON", "Markdown"],
      "standards": ["OWASP", "AWS Security", "RBAC patterns", "Progressive Security Philosophy"],
      "status": "active"
    },

    "SecurityTriageAgent": {
      "path": "src/agents/specialists/SecurityTriageAgent.js",
      "description": "Intelligent security finding triage against established strategy",
      "capabilities": [
        "security-finding-triage",
        "strategy-based-filtering",
        "acceptable-risk-assessment",
        "false-positive-detection",
        "pilot-readiness-evaluation",
        "contextual-security-analysis",
        "risk-level-calculation"
      ],
      "securityIntegration": {
        "strategy": "tech_stack_security_standards",
        "filtering": "context_aware_triage",
        "validation": "strategy_compliance_check",
        "reporting": "actionable_insights"
      },
      "outputFormats": ["JSON", "Markdown"],
      "standards": ["Tim-Combo Security Strategy", "AWS Control Tower", "Risk-Based Security"],
      "status": "active"
    },

    "AgentClassifier": {
      "path": "src/agents/specialists/AgentClassifier.js",
      "description": "Agent classification and intelligent routing",
      "capabilities": [
        "task-classification",
        "agent-selection", 
        "workflow-optimization",
        "load-balancing"
      ],
      "outputFormats": ["JSON"],
      "status": "active"
    },

    "AgentMemoryManager": {
      "path": "src/agents/specialists/AgentMemoryManager.js",
      "description": "Agent memory and context management", 
      "capabilities": [
        "context-preservation",
        "memory-optimization",
        "state-management",
        "session-coordination"
      ],
      "outputFormats": ["JSON"],
      "status": "active"
    },
    
    "deployment-orchestrator": {
      "description": "Orchestrates multi-environment deployments",
      "capabilities": [
        "cloudformation-generation",
        "multi-account-deployment",
        "cross-stack-references",
        "rollback-strategies"
      ],
      "outputFormats": ["YAML", "JSON"],
      "platforms": ["AWS CloudFormation", "AWS SAM"]
    },

    "ui-ux-specialist": {
      "description": "Design consistency, accessibility, and UI/UX quality automation",
      "capabilities": [
        "perform-uiux-audit",
        "analyze-component-structure",
        "validate-design-system-compliance", 
        "perform-accessibility-audit",
        "analyze-visual-consistency",
        "generate-uiux-recommendations",
        "generate-automated-fixes",
        "validate-wcag-compliance",
        "check-color-contrast",
        "check-focus-indicators",
        "analyze-flowbite-usage",
        "cross-browser-consistency"
      ],
      "frameworks": ["React", "TypeScript", "Flowbite", "TailwindCSS"],
      "standards": ["WCAG 2.1 AA", "Design System", "Accessibility"],
      "outputFormats": ["TypeScript", "CSS", "JSON"],
      "status": "active"
    },

    "enhanced-deployment": {
      "description": "Enhanced deployment with frontend testing and CI/CD integration",
      "capabilities": [
        "run-frontend-tests",
        "validate-build-quality",
        "performance-testing",
        "visual-regression-testing",
        "cross-browser-testing",
        "accessibility-testing",
        "security-configuration-validation",
        "core-web-vitals-validation",
        "playwright-integration",
        "lighthouse-integration",
        "quality-gates",
        "automated-rollback"
      ],
      "frameworks": ["Playwright", "Lighthouse", "axe-core"],
      "platforms": ["AWS", "CloudFormation", "S3", "CloudFront"],
      "outputFormats": ["JSON", "Reports"],
      "status": "active"
    },

    "comprehensive-test-agent": {
      "description": "Complete test orchestration and management across all test types",
      "capabilities": [
        "execute-test-suite",
        "run-test-type",
        "validate-test-coverage",
        "generate-test-scenarios",
        "perform-test-health-check",
        "prepare-test-environment",
        "prepare-test-data",
        "execute-unit-tests",
        "execute-integration-tests",
        "execute-e2e-tests",
        "execute-api-tests",
        "execute-accessibility-tests",
        "execute-performance-tests",
        "execute-security-tests",
        "execute-visual-tests",
        "analyze-test-results",
        "generate-test-report",
        "coverage-analysis",
        "scenario-generation",
        "health-monitoring",
        "test-orchestration"
      ],
      "testTypes": ["unit", "integration", "e2e", "api", "accessibility", "performance", "security", "visual"],
      "frameworks": ["Jest", "Playwright", "Supertest", "axe-core", "Lighthouse", "OWASP ZAP"],
      "environments": ["unit", "dev", "sandbox", "staging", "production"],
      "outputFormats": ["JSON", "HTML", "JUnit", "Coverage"],
      "status": "active"
    }
  },

  "communicationPatterns": {
    "sequential": {
      "description": "Execute agents one after another in sequence",
      "useCases": ["Step-by-step feature building", "Pipeline processing"]
    },
    
    "parallel": {
      "description": "Execute multiple agents simultaneously",
      "useCases": ["Independent component generation", "Concurrent analysis"]
    },
    
    "pipeline": {
      "description": "Multi-stage execution with both sequential and parallel phases",
      "useCases": ["Complete feature development", "CI/CD workflows"]
    },
    
    "collaborative": {
      "description": "Agents share context and iterate together",
      "useCases": ["Complex problem solving", "Cross-domain integration"]
    }
  },

  "domainFactories": {
    "integration": {
      "description": "Employee data integration workflows",
      "defaultContext": "IntegrationData",
      "defaultDashboard": "CI_Admin",
      "dataPattern": "JSONB",
      "standardComponents": [
        "IntegrationWorkflowWidget",
        "IntegrationEmployeeWidget",
        "EmptyStateOnboarding"
      ],
      "commonEndpoints": [
        "/tim/employees",
        "/tim/validation",
        "/tim/reprocessing"
      ]
    },
    
    "timebridge": {
      "description": "TimeBridge sync and timesheet processing",
      "defaultContext": "TimeBridgeData", 
      "defaultDashboard": "TB_Admin",
      "dataPattern": "JSONB",
      "standardComponents": [
        "TimeBridgeSyncStatusWidget",
        "TimeBridgeOnboardingWizard",
        "TimeBridgeSyncMonitor"
      ],
      "commonEndpoints": [
        "/tim/timebridge/jobs",
        "/tim/timebridge/sync",
        "/tim/timebridge/status"
      ]
    },
    
    "analytics": {
      "description": "HappyHippo analytics and reporting",
      "defaultContext": "AnalyticsData",
      "defaultDashboard": "Analytics",
      "dataPattern": "Normalized",
      "standardComponents": [
        "PredictiveApprovalEngine",
        "AnalyticsDashboard",
        "ReportGenerator"
      ],
      "commonEndpoints": [
        "/analytics/reports",
        "/analytics/predictions",
        "/analytics/insights"
      ]
    },
    
    "superadmin": {
      "description": "Super admin operations and management",
      "defaultContext": "SuperAdminStatus",
      "defaultDashboard": "ResponsiveSuperAdminPanel",
      "dataPattern": "Mixed",
      "standardComponents": [
        "CreateIntegrationInstanceAction",
        "WorkQueueWidget",
        "ServiceTicketWidget"
      ],
      "commonEndpoints": [
        "/tim/admin/clients",
        "/tim/admin/companies", 
        "/tim/admin/integrations"
      ]
    }
  },

  "deploymentEnvironments": {
    "dev": {
      "awsAccount": "532595801838",
      "profile": "dev-sso",
      "lambdaBucket": "tim-dev-lambda",
      "cognitoPool": "us-east-2_oWj5l1j6m",
      "apiUrl": "https://n2eqji12v4.execute-api.us-east-2.amazonaws.com/prod"
    },
    
    "sandbox": {
      "awsAccount": "455510265254", 
      "profile": "sandbox-sso",
      "lambdaBucket": "tim-sb-be-live",
      "cognitoPool": "us-east-2_57sEtr0xp",
      "apiUrl": "https://k0y33bw7t8.execute-api.us-east-2.amazonaws.com/prod"
    },
    
    "media": {
      "awsAccount": "855652006097",
      "profile": "media-sso", 
      "frontendBucket": "tim-sb-fe-live-855652006097",
      "cloudFrontDistribution": "E25ON3LWW4KFNF"
    }
  },

  "testCredentials": {
    "SUPER_ADMIN": {
      "email": "dev_super@happyhippo.ai",
      "password": "123_GOtime", 
      "role": "SuperAdmin",
      "dashboard": "/super",
      "description": "Super admin with full system access and client impersonation - works in both dev and sandbox",
      "capabilities": ["client_impersonation", "company_management", "integration_management", "user_management"],
      "environment": "universal",
      "environments": ["dev", "sandbox"],
      "testScenarios": ["integration_creation", "client_management", "super_admin_workflows", "adp_pilot_workflows"]
    },
    
    "CI_ADMIN": {
      "email": "dev_c_admin@happyhippo.ai",
      "password": "123_GOtime",
      "role": "CI_Admin",
      "dashboard": "/admin/dashboard",
      "description": "Company Integration admin for HR data processing",
      "capabilities": ["integration_management", "employee_data_processing", "validation_workflows"],
      "environment": "dev",
      "testScenarios": ["integration_workflows", "employee_data_sync", "validation_processes"]
    },
    
    "TB_ADMIN": {
      "email": "test_c_admin@happyhippo.ai", 
      "password": "123_GOtime",
      "role": "TB_Admin",
      "dashboard": "/admin/dashboard",
      "description": "TimeBridge admin for timesheet processing",
      "capabilities": ["timesheet_processing", "sync_management", "time_tracking"],
      "environment": "dev",
      "testScenarios": ["timebridge_sync", "timesheet_workflows", "time_processing"]
    },

    "SANDBOX_SUPER": {
      "email": "test_super@flux-systems.info",
      "password": "123_GOtime",
      "role": "SuperAdmin",
      "dashboard": "/super",
      "description": "Alternative sandbox super admin for Flux Systems branding (dev_super@happyhippo.ai also works)",
      "capabilities": ["client_impersonation", "adp_pilot_testing", "integration_testing"],
      "environment": "sandbox",
      "testScenarios": ["flux_branding", "pilot_integration_testing"],
      "note": "dev_super@happyhippo.ai is preferred and works in sandbox too"
    },

    "SANDBOX_PILOT": {
      "email": "test_pilot@flux-systems.info",
      "password": "123_GOtime",
      "role": "CI_Admin", 
      "dashboard": "/admin/dashboard",
      "description": "ADP pilot user for testing integration workflows",
      "capabilities": ["adp_integration", "pilot_testing", "employee_sync"],
      "environment": "sandbox",
      "testScenarios": ["adp_employee_sync", "pilot_workflows", "integration_validation"]
    },

    "ANALYTICS_USER": {
      "email": "dev_analytics@happyhippo.ai",
      "password": "123_GOtime",
      "role": "Analytics",
      "dashboard": "/analytics",
      "description": "Analytics user for HR reporting and insights",
      "capabilities": ["report_generation", "data_analysis", "predictive_analytics"],
      "environment": "dev",
      "testScenarios": ["analytics_workflows", "report_generation", "dashboard_interaction"]
    },

    "REGULAR_USER": {
      "email": "dev_user@happyhippo.ai",
      "password": "123_GOtime",
      "role": "User",
      "dashboard": "/dashboard",
      "description": "Regular user for employee self-service testing",
      "capabilities": ["profile_management", "timesheet_entry", "benefits_viewing"],
      "environment": "dev",
      "testScenarios": ["employee_self_service", "profile_updates", "basic_workflows"]
    }
  },

  "testScenarios": {
    "integration_creation": {
      "description": "Create new integration instance with template selection",
      "requiredRole": "SuperAdmin",
      "steps": ["login", "navigate_to_integrations", "select_template", "configure_instance", "test_connection"],
      "expectedOutcome": "Integration instance created and tested successfully",
      "testData": ["integration_templates", "test_credentials", "sample_employee_data"]
    },
    
    "client_management": {
      "description": "Manage client accounts and company settings",
      "requiredRole": "SuperAdmin",
      "steps": ["login", "client_selector", "manage_companies", "update_settings", "verify_changes"],
      "expectedOutcome": "Client settings updated and persisted",
      "testData": ["client_accounts", "company_configurations"]
    },
    
    "employee_data_sync": {
      "description": "Synchronize employee data between systems",
      "requiredRole": "CI_Admin",
      "steps": ["login", "integration_dashboard", "trigger_sync", "monitor_progress", "validate_data"],
      "expectedOutcome": "Employee data synchronized successfully",
      "testData": ["employee_records", "mapping_configurations"]
    },
    
    "adp_pilot_workflows": {
      "description": "ADP pilot integration workflows",
      "requiredRole": "SuperAdmin",
      "steps": ["login", "adp_integration", "employee_mapping", "payroll_sync", "validation"],
      "expectedOutcome": "ADP integration functioning correctly",
      "testData": ["adp_templates", "pilot_employee_data"]
    },
    
    "timebridge_sync": {
      "description": "TimeBridge timesheet synchronization",
      "requiredRole": "TB_Admin", 
      "steps": ["login", "timebridge_dashboard", "sync_timesheets", "resolve_conflicts", "approve_data"],
      "expectedOutcome": "Timesheets synchronized and approved",
      "testData": ["timesheet_records", "sync_configurations"]
    }
  },

  "codeGeneration": {
    "templates": {
      "lambdaHandler": {
        "requiredImports": [
          "{ wrapHandler }",
          "{ executeQuery }",
          "{ createSuccessResponse, createErrorResponse }",
          "{ handleError }"
        ],
        "parameterPatterns": {
          "GET": "queryStringParameters: queryParams = {}",
          "DELETE": "queryStringParameters: queryParams = {}",
          "POST": "body: requestBody = {}",
          "PUT": "body: requestBody = {}"
        },
        "responseFormat": "APIResponse<T>",
        "idGeneration": "business-scoped"
      },
      
      "reactComponent": {
        "requiredImports": [
          "React",
          "{ useState, useEffect, useMemo, useCallback }",
          "{ Alert, Button, Card }",
          "react-icons/hi"
        ],
        "optimizationPatterns": [
          "React.memo",
          "useMemo",
          "useCallback"
        ],
        "styleSystem": "Flowbite + TailwindCSS"
      },
      
      "apiEndpoints": {
        "format": "APIResponse<T>",
        "errorFormat": "APIErrorResponse",
        "methodPatterns": {
          "GET": "query parameters",
          "POST": "request body", 
          "PUT": "request body",
          "DELETE": "query parameters"
        }
      }
    }
  },

  "qualityChecks": {
    "typescript": {
      "command": "npx tsc --noEmit --project . --pretty",
      "directory": "src/frontend"
    },
    
    "tests": {
      "unit": "npm test",
      "e2e": "npx playwright test --reporter=line",
      "directory": "src/frontend"
    },
    
    "linting": {
      "command": "npm run lint",
      "directory": "src/frontend"
    },
    
    "security": {
      "patterns": [
        "No hardcoded secrets",
        "Proper input validation",
        "RBAC implementation",
        "Error message sanitization"
      ]
    }
  },

  "mcpIntegration": {
    "enabled": true,
    "maxConcurrentAgents": 10,
    "conversationTimeout": 300000,
    "messageQueueSize": 100,
    "coordinationPatterns": [
      "sequential",
      "parallel", 
      "pipeline",
      "collaborative"
    ]
  }
}