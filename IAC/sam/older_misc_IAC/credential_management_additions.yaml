# Credential Management Endpoints
# These endpoints support the ConnectionTestPanel for credential listing, retrieval, and connection testing

# =====================================================
# CREDENTIAL LISTING - COGNITO AUTH REQUIRED
# Lists available credentials for connection testing
# Supports filtering by Integration_Type parameter
# =====================================================

  listCredentialsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: listCredentials_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        listCredentialsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/credentials
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer  # Internal API requires auth

# =====================================================
# CREDENTIAL RETRIEVAL - COGNITO AUTH REQUIRED
# Gets specific credential details by Credential_ID
# Used for connection testing with stored credentials
# =====================================================

  getCredentialFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: getCredential_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        getCredentialEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/credentials
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer  # Internal API requires auth

# =====================================================
# CONNECTION TESTING - COGNITO AUTH REQUIRED
# Tests live connections to external partner APIs
# Uses stored credentials to validate connectivity
# =====================================================

  testConnectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: testConnection_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60  # Connection tests may take time
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        testConnectionEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/integrations/test-connection
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer  # Internal API requires auth

# =====================================================
# CREDENTIAL STATUS - COGNITO AUTH REQUIRED
# Checks status of credentials (active, expired, etc.)
# Used for credential health monitoring
# =====================================================

  credentialStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: credentialStatus_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        credentialStatusEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/credentials/status
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer  # Internal API requires auth

# =====================================================
# UNIFIED CREDENTIAL HANDLER - COGNITO AUTH REQUIRED
# Unified handler for credential CRUD operations
# Supports the unified credential management system
# =====================================================

  unifiedCredentialHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: unifiedCredentialHandler_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        # List unified credentials
        unifiedCredentialsListEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/integrations/unified-credentials
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        # Create unified credential
        unifiedCredentialsCreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/integrations/unified-credentials
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        # Update unified credential
        unifiedCredentialsUpdateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/integrations/unified-credentials
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
        # Delete unified credential
        unifiedCredentialsDeleteEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/integrations/unified-credentials
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer

# =====================================================
# CREDENTIAL STORE - COGNITO AUTH REQUIRED
# Administrative credential storage and management
# Used for secure credential persistence
# =====================================================

  credentialStoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: credentialStore_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        # Store credential
        credentialStoreEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/credential-store
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        # Retrieve stored credential
        credentialRetrieveEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/credential-store
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        # Update stored credential
        credentialUpdateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/credential-store
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
        # Delete stored credential
        credentialDeleteEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/credential-store
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer

# =====================================================
# NOTES:
# - All credential endpoints require Cognito authentication for security
# - Connection testing includes external API calls so timeout is set to 60s
# - Credential storage uses admin path for elevated security requirements
# - These handlers support the unified credential management system
# - Handler files should be packaged as: {handlerName}_js.zip
# =====================================================
