# TIM Missing Handlers Extension
# Adds the 17 handlers that exist in code but are missing from IAC
# Based on analysis of actual handlers vs IAC coverage

# =====================================================
# MISSING ADMIN/CREDENTIAL MANAGEMENT HANDLERS
# =====================================================

  configurationGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: configurationGet_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        configurationGetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/configuration
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  configurationStoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: configurationStore_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        configurationStoreEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/configuration
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  credentialDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: credentialDelete_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        credentialDeleteEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/credentials
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer

  credentialStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: credentialStatus_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        credentialStatusEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/credentials/status
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  credentialStoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: credentialStore_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        credentialStoreEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/credentials
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  credentialUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: credentialUpdate_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        credentialUpdateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/credentials
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer

  integrationCredentialManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: integrationCredentialManager_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        integrationCredentialManagerEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/integration-credentials
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  timebridgeDisableFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: timebridgeDisable_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        timebridgeDisableEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/timebridge/disable
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  timebridgeEnableFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: timebridgeEnable_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        timebridgeEnableEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/timebridge/enable
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  timebridgeStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: timebridgeStatus_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        timebridgeStatusEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/admin/timebridge/status
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

# =====================================================
# MISSING ANALYTICS HANDLER
# =====================================================

  eventImpactFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: eventImpact_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        eventImpactEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/analytics/impact
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

# =====================================================
# MISSING CRITICAL JOBS HANDLER
# =====================================================

  getCriticalJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: getCriticalJob_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        getCriticalJobEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/jobs/critical/get
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

# =====================================================
# MISSING EMAIL SERVICE HANDLER
# =====================================================

  emailServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: emailService_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        emailServiceEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/email/service
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

# =====================================================
# MISSING ORG CRUD HANDLERS
# =====================================================

  orgCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: orgCreate_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        orgCreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/org
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  orgDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: orgDelete_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        orgDeleteEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/org
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer

  orgUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: orgUpdate_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        orgUpdateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/org
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer

# =====================================================
# MISSING USER COGNITO HANDLER
# =====================================================

  userCognitoPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref TIMBucketName
        Key: userCognitoPost_js.zip
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DB_HOST: !Ref timhost
          DB_USER: !Ref timuser
          DB_PASS: !Ref tim4pass
          DB_NAME: !Ref timname
          DB_PORT: !Ref timport
      Events:
        userCognitoPostEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tim/user/cognito
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
