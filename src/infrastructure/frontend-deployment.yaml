AWSTemplateFormatVersion: '2010-09-09'
Description: 'Seawater Frontend S3/CloudFront Deployment for Media Account'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    Description: Environment name
  DomainName:
    Type: String
    Default: 'seawater.io'
    Description: Domain name for the application
  DevApiEndpoint:
    Type: String
    Default: 'https://5puux7rpx0.execute-api.us-east-2.amazonaws.com/dev'
    Description: Development backend API endpoint

Resources:
  # S3 Bucket for hosting static website
  SeawaterFrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'seawater-frontend-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # S3 Bucket Policy for public read access
  SeawaterFrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SeawaterFrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${SeawaterFrontendBucket}/*'

  # CloudFront Origin Access Control
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 'seawater-oac-${Environment}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  SeawaterCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt SeawaterFrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
        Enabled: true
        DefaultRootObject: index.html
        Comment: !Sub 'Seawater Frontend Distribution - ${Environment}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed CORS-S3Origin
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # Lambda function for deployment automation
  DeploymentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'seawater-frontend-deploy-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt DeploymentFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  cloudfront = boto3.client('cloudfront')
                  
                  bucket_name = event['ResourceProperties']['BucketName']
                  distribution_id = event['ResourceProperties']['DistributionId']
                  
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      # Upload a simple index.html if none exists
                      try:
                          s3.head_object(Bucket=bucket_name, Key='index.html')
                      except:
                          s3.put_object(
                              Bucket=bucket_name,
                              Key='index.html',
                              Body='<html><body><h1>Seawater.io - Deployment in progress...</h1></body></html>',
                              ContentType='text/html'
                          )
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IAM Role for deployment function
  DeploymentFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3DeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:PutObjectAcl
                Resource:
                  - !GetAtt SeawaterFrontendBucket.Arn
                  - !Sub '${SeawaterFrontendBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: '*'

  # Custom resource to trigger initial deployment
  InitialDeployment:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt DeploymentFunction.Arn
      BucketName: !Ref SeawaterFrontendBucket
      DistributionId: !Ref SeawaterCloudFrontDistribution

Outputs:
  FrontendBucketName:
    Description: Name of the S3 bucket for frontend hosting
    Value: !Ref SeawaterFrontendBucket
    Export:
      Name: !Sub '${AWS::StackName}-FrontendBucket'

  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref SeawaterCloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt SeawaterCloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomain'

  WebsiteURL:
    Description: URL of the website
    Value: !Sub 'https://${SeawaterCloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  S3BucketWebsiteURL:
    Description: URL of the S3 bucket website endpoint
    Value: !GetAtt SeawaterFrontendBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-S3WebsiteURL'