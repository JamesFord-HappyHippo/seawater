/**
 * TypeScript types for employee_records
 * Employee records with JSONB data from external systems
 * Generated by Agent Factory from database schema
 */

// Base interface following database field names exactly
export interface EmployeeRecords {
  Employee_ID: string;
  Company_ID: string;
  employee_data_jsonb: Record<string, any>;
  validation_status: 'valid' | 'invalid' | 'pending';
  validation_errors?: ValidationError[];
  source_system: 'ADP' | 'QuickBooks' | 'BambooHR';
  
  // Timestamps - required for all entities
  Create_Date: string;
  Last_Updated?: string;
  
  // Relationships
  company?: Company[];
  validationHistory?: ValidationHistory[];
}

// API Response wrapper following APIResponse<T> pattern
export interface EmployeeRecordsResponse {
  success: true;
  message: string;
  meta: {
    Total_Records: number;
    Request_ID: string;
    Timestamp: string;
    Company_ID?: string;
  };
  data: {
    Records: EmployeeRecords[];
    Query_Context?: {
      Mode?: string;
      Operation?: string;
      Company_ID?: string;
    };
    Analytics?: {
      Total_Active: number;
      By_Status?: Record<string, number>;
    };
  };
}

// Error response following APIErrorResponse pattern
export interface EmployeeRecordsErrorResponse {
  success: false;
  message: string;
  meta: {
    Timestamp: string;
    Request_ID?: string;
    Error_Source: string;
  };
  error_code: string;
  error_details: string;
  validation_errors?: {
    field: string;
    code: string;
    message: string;
  }[];
}

// Create/Update input types
export type CreateEmployeeRecordsInput = Omit<EmployeeRecords, 'Create_Date' | 'Last_Updated' | 'company' | 'validationHistory'>;
export type UpdateEmployeeRecordsInput = Partial<CreateEmployeeRecordsInput>;

// Filter and search types
export interface EmployeeRecordsFilters {
  Company_ID?: string;
  status?: string;
  dateRange?: {
    start: string;
    end: string;
  };
}

export interface EmployeeRecordsSearchParams extends EmployeeRecordsFilters {
  limit?: number;
  offset?: number;
  sortBy?: keyof EmployeeRecords;
  sortOrder?: 'asc' | 'desc';
}
